{
  "actions": {
    "name": "actions",
    "in": "query",
    "required": true,
    "schema": {
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "looking",
          "typing"
        ]
      }
    },
    "description": "Current actions in the chat. Send empty if all actions have been finished."
  },
  "caption": {
    "name": "caption",
    "in": "query",
    "schema": {
      "type": "string"
    },
    "description": "File caption."
  },
  "chatId": {
    "name": "chatId",
    "in": "query",
    "required": true,
    "schema": {
      "type": "string"
    },
    "description": "Unique nick, chat id or user id. Id could be obtained from incoming [events](#operations-tag-events) (Ð¿Ð¾Ð»Ðµ `chatId`).",
    "example": "@user_id_example, @public_chat_id_example Ð¸Ð»Ð¸ 681869378@chat.agent"
  },
  "cursor": {
    "name": "cursor",
    "in": "query",
    "schema": {
      "type": "string"
    },
    "description": "Identifier for obtaining the continuation of the users' list. The cursor can be obtained from the first/previous `getMembers` request."
  },
  "delLastMessages": {
    "name": "delLastMessages",
    "in": "query",
    "schema": {
      "type": "boolean"
    },
    "description": "Delete last messages of the given user.",
    "example": "true"
  },
  "fileId": {
    "name": "fileId",
    "in": "query",
    "required": true,
    "schema": {
      "type": "string"
    },
    "description": "Id of the previously uploaded file."
  },
  "forwardChatId": {
    "name": "forwardChatId",
    "in": "query",
    "schema": {
      "type": "string"
    },
    "description": "Chat id from which a message is going to be forwarded. Set only with the `forwardMsgId`. Can't be set with the `replyMsgId` param."
  },
  "forwardMsgId": {
    "name": "forwardMsgId",
    "in": "query",
    "schema": {
      "type": "array",
      "items": {
        "type": "integer"
      }
    },
    "description": "Message id to forwaded. Set only with the `forwardChatId`. Can't be set with the `replyMsgId` param."
  },
  "groupOrChannelAbout": {
    "name": "about",
    "in": "query",
    "required": true,
    "schema": {
      "type": "string"
    },
    "description": "Chat description",
    "example": "Chat description"
  },
  "groupOrChannelId": {
    "name": "chatId",
    "in": "query",
    "required": true,
    "schema": {
      "type": "string"
    },
    "description": "Unique nick, group id or channel id. Id can be obtained from [events](#operations-tag-events) (`chatId`).",
    "example": "@public_chat_id_example Ð¸Ð»Ð¸ 681869378@chat.agent"
  },
  "groupOrChannelRules": {
    "name": "rules",
    "in": "query",
    "required": true,
    "schema": {
      "type": "string"
    },
    "description": "Chat rules",
    "example": "Chat rules"
  },
  "groupOrChannelTitle": {
    "name": "title",
    "in": "query",
    "required": true,
    "schema": {
      "type": "string"
    },
    "description": "Chat title",
    "example": "Chat title"
  },
  "lastEventId": {
    "name": "lastEventId",
    "in": "query",
    "required": true,
    "schema": {
      "type": "integer"
    },
    "description": "Id of the last known event."
  },
  "msgId": {
    "name": "msgId",
    "in": "query",
    "required": true,
    "schema": {
      "type": "integer"
    },
    "description": "Message id."
  },
  "msgIds": {
    "name": "msgId",
    "in": "query",
    "required": true,
    "schema": {
      "type": "array",
      "items": {
        "type": "integer"
      }
    },
    "description": "Messages ids."
  },
  "pendingApprove": {
    "name": "approve",
    "in": "query",
    "required": true,
    "schema": {
      "type": "boolean"
    },
    "description": "Approve or reject.",
    "example": "true"
  },
  "pendingEveryone": {
    "name": "everyone",
    "in": "query",
    "schema": {
      "type": "boolean"
    },
    "description": "Decision about all the users waiting for joining the chat. Can't be sent with the `userId` param.",
    "example": "true"
  },
  "pendingUserId": {
    "name": "userId",
    "in": "query",
    "schema": {
      "type": "string"
    },
    "description": "User nick or id who is waiting for joining the chat. Can't be sent with the `everyone` param.",
    "example": "true"
  },
  "pollTime": {
    "name": "pollTime",
    "in": "query",
    "required": true,
    "schema": {
      "type": "integer"
    },
    "description": "Time for keeping the connection alive (secs)."
  },
  "replyMsgId": {
    "name": "replyMsgId",
    "in": "query",
    "schema": {
      "type": "array",
      "items": {
        "type": "integer"
      }
    },
    "description": "Id of a quoted message. Can't be sent with `forwardChatId` and `forwardMsgId` params."
  },
  "text": {
    "name": "text",
    "in": "query",
    "required": true,
    "schema": {
      "type": "string"
    },
    "description": "Message text. A user can be tagged in a format @[userId].",
    "example": "Hey, @[0123456789]"
  },
  "textAnswer": {
    "name": "text",
    "in": "query",
    "schema": {
      "type": "string"
    },
    "description": "Text that is going to be shown to a user. If not set, nothing will be shown."
  },
  "token": {
    "name": "token",
    "in": "query",
    "required": true,
    "schema": {
      "type": "string"
    },
    "description": "Secret token.",
    "example": "001.2659914704.0218887601:747432131"
  },
  "userId": {
    "name": "userId",
    "in": "query",
    "required": true,
    "schema": {
      "type": "string"
    },
    "description": "Unique user nick or id."
  },
  "queryId": {
    "name": "queryId",
    "in": "query",
    "schema": {
      "type": "string"
    },
    "required": true,
    "description": "Id of the callback query received by the bot"
  },
  "showAlert": {
    "name": "showAlert",
    "in": "query",
    "description": "If has been set to `true`, the `alert` is going to be shown instead of notification.",
    "schema": {
      "type": "boolean"
    }
  },
  "url": {
    "name": "url",
    "in": "query",
    "schema": {
      "type": "string"
    },
    "description": "URL to open by a client app"
  },
  "inlineKeyboardMarkup": {
    "name": "inlineKeyboardMarkup",
    "in": "body",
    "description": "Array of buttons. The top level array is a list of rows of buttons. The second level array is a list of buttons in a row.",
    "schema": {
      "type": "array",
      "items": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Button label. It's possible to use \\n for multiline text",
                  "example": "ðŸŒŽ Visit website"
                },
                "url": {
                  "type": "string",
                  "description": "URL to open on click",
                  "example": "http://mail.ru"
                }
              },
              "required" : [ "text", "url" ]
            },
            {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "description": "Button label. It's possible to use \\n for multiline text",
                  "example": "ðŸ¤– Make a query"
                },
                "callbackData": {
                  "type": "string",
                  "description": "Data that will be sent to the bot when button is clicked.",
                  "example": "RXhhbXBsZSBjYWxsYmFjayBkYXRhCg=="
                }
              },
              "required" : [ "text", "callbackData" ]
            }
          ]
        }
      }
    }
  }
}
